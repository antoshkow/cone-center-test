{"version":3,"sources":["components/Input/Input.tsx","utils/constants.tsx","utils/utils.tsx","components/App/App.tsx","index.tsx"],"names":["Input","date","cursor","handleChange","handleKeyDown","handleSubmit","ref","useRef","useEffect","input","current","setSelectionRange","className","type","id","name","placeholder","value","onChange","onKeyDown","onKeyPress","autoComplete","monthList","getMonthName","getMonth","loopPartOfDate","day","month","year","hours","minutes","seconds","selection","mod","newDate","getDate","Date","setDate","setMonth","getFullYear","getHours","setHours","getMinutes","setMinutes","getSeconds","setSeconds","formatDate","handleSetSelectionRange","element","start","end","onselect","App","useState","setCursor","changeDate","includes","setTimeout","evt","currentTarget","selectionStart","code","ctrlKey","selectionEnd","selectionDirection","preventDefault","length","setFullYear","formattedDate","key","monthIndex","inputDate","split","Number","slice","toString","test","handleRegExp","findIndex","monthName","toLowerCase","formatInputDate","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ce126170.chunk.js","sourcesContent":["import React, {\n  FC,\n  useRef,\n  useEffect\n} from 'react';\nimport './Input.css';\nimport { InputProps } from '../../utils/constants';\n\nconst Input: FC<InputProps> = ({\n  date,\n  cursor,\n  handleChange,\n  handleKeyDown,\n  handleSubmit\n}) => {\n\n  const ref = useRef<HTMLInputElement>(null!);\n\n  useEffect(() => {\n    const input = ref.current;\n    if (input) input.setSelectionRange(cursor, cursor);\n  }, [ref, cursor, date]);\n\n  return (\n    <input\n      className=\"input\"\n      type=\"text\"\n      id=\"date\"\n      name=\"date\"\n      placeholder=\"Введите дату\"\n      ref={ref}\n      value={date}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      onKeyPress={handleSubmit}\n      autoComplete=\"off\"\n    />\n  );\n}\n\nexport default Input;\n","import { ChangeEvent, KeyboardEvent } from \"react\";\n\nexport const monthList: string[] = [\n  'January', 'February', 'March',\n  'April', 'May', 'June',\n  'July', 'August', 'September',\n  'October', 'November', 'December'\n];\n\nexport const daySelectionStart: number = 0;\nexport const daySelectionEnd: number = 2;\nexport const monthSelectionStart: number = 3;\nexport const yearSelectionStart: number = 4;\nexport const yearSelectionEnd: number = 8;\nexport const hoursSelectionStart: number = 9;\nexport const hoursSelectionEnd: number = 11;\nexport const minutesSelectionStart: number = 12;\nexport const minutesSelectionEnd: number = 14;\nexport const secondsSelectionStart: number = 15;\nexport const secondsSelectionEnd: number = 17;\n\nexport interface InputProps {\n  date: string\n  cursor: number | null\n  handleChange(evt: ChangeEvent<HTMLInputElement>): void\n  handleKeyDown(evt: KeyboardEvent<HTMLInputElement>): void\n  handleSubmit(evt: KeyboardEvent<Element>): void\n}\n","import { monthList } from './constants';\n\nexport const getMonthName = (date: Date) => {\n  return monthList[date.getMonth()];\n}\n\nexport const loopPartOfDate = (\n  day: number,\n  month: number,\n  year: number,\n  hours: number,\n  minutes: number,\n  seconds: number,\n  date: Date,\n  selection: string,\n  mod: number\n) => {\n\n  let newDate: Date;\n\n  if (selection === 'day') {\n    day = date.getDate() + mod;\n    newDate = new Date(year, month + 1, 0);\n    if (day < 1) day = newDate.getDate();\n    if (day > newDate.getDate()) {\n      date.setDate(1);\n      day = date.getDate();\n    }\n\n    return day;\n  }\n  if (selection === 'month') {\n    month = date.getMonth() + mod;\n    newDate = new Date(year + 1, -1, day);\n    if (month < 0) month = newDate.getMonth();\n    if (month > newDate.getMonth()) {\n      date.setMonth(0);\n      month = date.getMonth();\n    }\n\n    return month;\n  }\n  if (selection === 'year') {\n    year = date.getFullYear() + mod;\n\n    return year;\n  }\n  if (selection === 'hours') {\n    hours = date.getHours() + mod;\n    newDate = new Date(year, month, day + 1, -1);\n    if (hours < 0) hours = newDate.getHours();\n    if (hours > newDate.getHours()) {\n      date.setHours(0);\n      hours = date.getHours();\n    }\n\n    return hours;\n  }\n  if (selection === 'minutes') {\n    minutes = date.getMinutes() + mod;\n    newDate = new Date(year, month, day, hours + 1, -1);\n    if (minutes < 0) minutes = newDate.getMinutes();\n    if (minutes > newDate.getMinutes()) {\n      date.setMinutes(0);\n      minutes = date.getMinutes();\n    }\n\n    return minutes;\n  }\n  if (selection === 'seconds') {\n    seconds = date.getSeconds() + mod;\n    newDate = new Date(year, month, day, hours, minutes + 1, -1);\n    if (seconds < 0) seconds = newDate.getSeconds();\n    if (seconds > newDate.getSeconds()) {\n      date.setSeconds(0);\n      seconds = date.getSeconds();\n    }\n\n    return seconds;\n  }\n}\n\nexport const formatDate = (\n  day: number,\n  month: number,\n  year: number,\n  hours: number,\n  minutes: number,\n  seconds: number\n) => {\n  const formatDate =\n  `${day < 10 ? '0' + day : day}/${monthList[month]}/${year} ${hours < 10 ? '0' + hours : hours}:${minutes < 10 ? '0' + minutes : minutes}:${seconds < 10 ? '0' + seconds : seconds}`;\n\nreturn formatDate;\n}\n\nconst handleRegExp = (month: string) => {\n  return /^[a-zA-Z]*$/.test(month);\n}\n\nexport const formatInputDate = (date: string) => {\n  const inputDate: Array<string> = date.split(/\\W/);\n  const day: number = Number(inputDate.slice(0, 1));\n  let month: string = inputDate.slice(1, 2).toString();\n  let year: number = Number(inputDate.slice(2, 3));\n  let hours: number = Number(inputDate.slice(3, 4));\n  let minutes: number = Number(inputDate.slice(4, 5));\n  let seconds: number = Number(inputDate.slice(5, 6));\n  let monthIndex: number;\n\n  if (Number(hours) > 23) {\n    seconds = minutes;\n    minutes = hours;\n    hours = year;\n    year = 2021;\n  }\n\n  if (!year) {\n    year = 2021;\n  } else if (year.toString().length === 2) {\n    if (Number(year) <= 50) {\n      year = Number(`20${year}`);\n    } else if (Number(year) >= 50) {\n      year = Number(`19${year}`);\n    }\n  }\n\n  if (handleRegExp(month)) {\n    monthIndex = monthList.findIndex((monthName) => {\n      return monthName.toLowerCase().includes(month);\n    });\n  } else {\n    monthIndex = Number(month) - 1;\n  }\n\n  const currentDate: string = formatDate(\n    day,\n    monthIndex,\n    year,\n    hours,\n    minutes,\n    seconds\n  );\n\n  return currentDate;\n}\n\nexport const handleSetSelectionRange = (\n  element: HTMLInputElement,\n  start: number,\n  end: number\n) => {\n  element.onselect = () => {\n    element.setSelectionRange(start, end);\n  }\n}\n","import React, {\n  FC,\n  useState,\n  useEffect,\n  ChangeEvent,\n  KeyboardEvent\n} from 'react';\nimport './App.css';\nimport Input from '../Input/Input';\nimport {\n  getMonthName,\n  formatInputDate,\n  loopPartOfDate,\n  handleSetSelectionRange,\n  formatDate\n} from '../../utils/utils';\nimport {\n  monthList,\n  daySelectionStart,\n  daySelectionEnd,\n  monthSelectionStart,\n  yearSelectionStart,\n  yearSelectionEnd,\n  hoursSelectionStart,\n  hoursSelectionEnd,\n  minutesSelectionStart,\n  minutesSelectionEnd,\n  secondsSelectionStart,\n  secondsSelectionEnd\n} from '../../utils/constants';\n\nconst App: FC = () => {\n\n  const [date, setDate] = useState<string>('');\n  const [cursor, setCursor] = useState<number | null>(null);\n\n  const changeDate: Date | string = new Date(date);\n\n  let day: number = changeDate.getDate();\n  let month: number = changeDate.getMonth();\n  let year: number = changeDate.getFullYear();\n  let hours: number = changeDate.getHours();\n  let minutes: number = changeDate.getMinutes();\n  let seconds: number = changeDate.getSeconds();\n\n  let mod: number;\n\n  const handleInputChange = (evt: ChangeEvent<HTMLInputElement>) => {\n    setCursor(evt.currentTarget.selectionStart);\n    setDate(evt.currentTarget.value);\n  }\n\n  const handleInputKeyDown = (evt: KeyboardEvent<HTMLInputElement>) => {\n    const code = evt.code;\n    const input = evt.currentTarget;\n    const ctrlKey = evt.ctrlKey;\n    let selectionStart = input.selectionStart;\n    let selectionEnd = input.selectionEnd;\n    const cursor: number | null = input.selectionDirection === 'forward' ?\n    selectionEnd : selectionStart;\n\n    let selection: string;\n\n    if (code === 'ArrowUp') {\n      mod = 1;\n      setCursor(selectionStart);\n    } else if (code === 'ArrowDown') {\n      mod = -1;\n      setCursor(selectionStart);\n    } else {\n      return;\n    }\n\n    evt.preventDefault();\n\n    if (cursor === null) {\n      return;\n\n      // Day\n    } else if (cursor <= daySelectionEnd) {\n      selection = 'day';\n\n      handleSetSelectionRange(input, daySelectionStart, daySelectionEnd);\n\n      if (ctrlKey) {\n        changeDate.setDate(day + mod);\n      } else {\n        day = loopPartOfDate(\n          day,\n          month,\n          year,\n          hours,\n          minutes,\n          seconds,\n          changeDate,\n          selection,\n          mod\n        )!;\n      }\n\n      // Month\n    } else if (cursor >= monthSelectionStart && cursor <= monthSelectionStart + getMonthName(changeDate).length) {\n      selection = 'month';\n\n      if (ctrlKey) {\n        changeDate.setMonth(month + mod);\n\n        handleSetSelectionRange(input, monthSelectionStart, monthSelectionStart + getMonthName(changeDate).length);\n      } else {\n        month = loopPartOfDate(\n          day,\n          month,\n          year,\n          hours,\n          minutes,\n          seconds,\n          changeDate,\n          selection,\n          mod\n        )!;\n\n        handleSetSelectionRange(input, monthSelectionStart, monthSelectionStart + monthList[month].length);\n      }\n\n      // Year\n    } else if (cursor >= yearSelectionStart + getMonthName(changeDate).length && cursor <= yearSelectionEnd + getMonthName(changeDate).length) {\n      selection = 'year';\n\n      handleSetSelectionRange(input, yearSelectionStart + getMonthName(changeDate).length, yearSelectionEnd + getMonthName(changeDate).length);\n\n      if (ctrlKey) {\n        changeDate.setFullYear(year + mod);\n      } else {\n        year = loopPartOfDate(\n          day,\n          month,\n          year,\n          hours,\n          minutes,\n          seconds,\n          changeDate,\n          selection,\n          mod\n        )!;\n      }\n\n      // Hours\n    } else if (cursor >= hoursSelectionStart + getMonthName(changeDate).length && cursor <= hoursSelectionEnd + getMonthName(changeDate).length) {\n      selection = 'hours';\n\n      handleSetSelectionRange(input, hoursSelectionStart + getMonthName(changeDate).length, hoursSelectionEnd + getMonthName(changeDate).length);\n\n      if (ctrlKey) {\n        changeDate.setHours(hours + mod);\n      } else {\n        hours = loopPartOfDate(\n          day,\n          month,\n          year,\n          hours,\n          minutes,\n          seconds,\n          changeDate,\n          selection,\n          mod\n        )!;\n      }\n\n      // Minutes\n    } else if (cursor >= minutesSelectionStart + getMonthName(changeDate).length && cursor <= minutesSelectionEnd + getMonthName(changeDate).length) {\n      selection = 'minutes';\n\n      handleSetSelectionRange(input, minutesSelectionStart + getMonthName(changeDate).length, minutesSelectionEnd + getMonthName(changeDate).length);\n\n      if (ctrlKey) {\n        changeDate.setMinutes(minutes + mod);\n      } else {\n        minutes = loopPartOfDate(\n          day,\n          month,\n          year,\n          hours,\n          minutes,\n          seconds,\n          changeDate,\n          selection,\n          mod\n        )!;\n      }\n\n      // Seconds\n    } else if (cursor >= secondsSelectionStart + getMonthName(changeDate).length && cursor <= secondsSelectionEnd + getMonthName(changeDate).length) {\n      selection = 'seconds';\n\n      handleSetSelectionRange(input, secondsSelectionStart + getMonthName(changeDate).length, secondsSelectionEnd + getMonthName(changeDate).length);\n\n      if (ctrlKey) {\n        changeDate.setSeconds(seconds + mod);\n      } else {\n        seconds = loopPartOfDate(\n          day,\n          month,\n          year,\n          hours,\n          minutes,\n          seconds,\n          changeDate,\n          selection,\n          mod\n        )!;\n      }\n    } else {\n      return;\n    }\n\n    if (ctrlKey) {\n      day = changeDate.getDate();\n      month = changeDate.getMonth();\n      year = changeDate.getFullYear();\n      hours = changeDate.getHours();\n      minutes = changeDate.getMinutes();\n      seconds = changeDate.getSeconds();\n      const formattedDate: string = formatDate(\n        day,\n        month,\n        year,\n        hours,\n        minutes,\n        seconds\n      );\n\n      setDate(formattedDate);\n    } else {\n      const formattedDate: string = formatDate(\n        day,\n        month,\n        year,\n        hours,\n        minutes,\n        seconds\n      );\n\n      setDate(formattedDate);\n    }\n  }\n\n    const handleInputSubmit = (evt: KeyboardEvent<Element>) => {\n    if (evt.key === 'Enter') {\n      setDate(formatInputDate(date));\n    }\n  }\n\n  useEffect(() => {\n    if (date.includes('undefined')) {\n      setDate('Формат даты: day month year time');\n      setTimeout(() => {\n        setDate('');\n      }, 2000);\n    }\n  }, [date]);\n\n  return (\n    <div className=\"app\">\n      <Input\n        date={date}\n        cursor={cursor}\n        handleChange={handleInputChange}\n        handleKeyDown={handleInputKeyDown}\n        handleSubmit={handleInputSubmit}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}